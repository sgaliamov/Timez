#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.261
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Timez.DAL.DataContext
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="galyamov_timez")]
	public sealed partial class TimezDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBoard(Board instance);
    partial void UpdateBoard(Board instance);
    partial void DeleteBoard(Board instance);
    partial void InsertUsersInvite(UsersInvite instance);
    partial void UpdateUsersInvite(UsersInvite instance);
    partial void DeleteUsersInvite(UsersInvite instance);
    partial void InsertBoardsColor(BoardsColor instance);
    partial void UpdateBoardsColor(BoardsColor instance);
    partial void DeleteBoardsColor(BoardsColor instance);
    partial void InsertBoardsUser(BoardsUser instance);
    partial void UpdateBoardsUser(BoardsUser instance);
    partial void DeleteBoardsUser(BoardsUser instance);
    partial void InsertEventHistory(EventHistory instance);
    partial void UpdateEventHistory(EventHistory instance);
    partial void DeleteEventHistory(EventHistory instance);
    partial void InsertOrganization(Organization instance);
    partial void UpdateOrganization(Organization instance);
    partial void DeleteOrganization(Organization instance);
    partial void InsertOrganizationUser(OrganizationUser instance);
    partial void UpdateOrganizationUser(OrganizationUser instance);
    partial void DeleteOrganizationUser(OrganizationUser instance);
    partial void InsertProject(Project instance);
    partial void UpdateProject(Project instance);
    partial void DeleteProject(Project instance);
    partial void InsertProjectsUser(ProjectsUser instance);
    partial void UpdateProjectsUser(ProjectsUser instance);
    partial void DeleteProjectsUser(ProjectsUser instance);
    partial void InsertTariff(Tariff instance);
    partial void UpdateTariff(Tariff instance);
    partial void DeleteTariff(Tariff instance);
    partial void InsertTask(Task instance);
    partial void UpdateTask(Task instance);
    partial void DeleteTask(Task instance);
    partial void InsertTasksArchive(TasksArchive instance);
    partial void UpdateTasksArchive(TasksArchive instance);
    partial void DeleteTasksArchive(TasksArchive instance);
    partial void InsertTasksComment(TasksComment instance);
    partial void UpdateTasksComment(TasksComment instance);
    partial void DeleteTasksComment(TasksComment instance);
    partial void InsertTasksStatus(TasksStatus instance);
    partial void UpdateTasksStatus(TasksStatus instance);
    partial void DeleteTasksStatus(TasksStatus instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertText(Text instance);
    partial void UpdateText(Text instance);
    partial void DeleteText(Text instance);
    #endregion
		
		public TimezDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TimezDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TimezDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TimezDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		internal System.Data.Linq.Table<Board> Boards
		{
			get
			{
				return this.GetTable<Board>();
			}
		}
		
		internal System.Data.Linq.Table<UsersInvite> UsersInvites
		{
			get
			{
				return this.GetTable<UsersInvite>();
			}
		}
		
		internal System.Data.Linq.Table<BoardsColor> BoardsColors
		{
			get
			{
				return this.GetTable<BoardsColor>();
			}
		}
		
		internal System.Data.Linq.Table<BoardsUser> BoardsUsers
		{
			get
			{
				return this.GetTable<BoardsUser>();
			}
		}
		
		internal System.Data.Linq.Table<EventHistory> EventHistories
		{
			get
			{
				return this.GetTable<EventHistory>();
			}
		}
		
		internal System.Data.Linq.Table<Organization> Organizations
		{
			get
			{
				return this.GetTable<Organization>();
			}
		}
		
		internal System.Data.Linq.Table<OrganizationUser> OrganizationUsers
		{
			get
			{
				return this.GetTable<OrganizationUser>();
			}
		}
		
		internal System.Data.Linq.Table<Project> Projects
		{
			get
			{
				return this.GetTable<Project>();
			}
		}
		
		internal System.Data.Linq.Table<ProjectsUser> ProjectsUsers
		{
			get
			{
				return this.GetTable<ProjectsUser>();
			}
		}
		
		internal System.Data.Linq.Table<Tariff> Tariffs
		{
			get
			{
				return this.GetTable<Tariff>();
			}
		}
		
		internal System.Data.Linq.Table<Task> Tasks
		{
			get
			{
				return this.GetTable<Task>();
			}
		}
		
		internal System.Data.Linq.Table<TasksArchive> TasksArchives
		{
			get
			{
				return this.GetTable<TasksArchive>();
			}
		}
		
		internal System.Data.Linq.Table<TasksComment> TasksComments
		{
			get
			{
				return this.GetTable<TasksComment>();
			}
		}
		
		internal System.Data.Linq.Table<TasksStatus> TasksStatus
		{
			get
			{
				return this.GetTable<TasksStatus>();
			}
		}
		
		internal System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		internal System.Data.Linq.Table<Text> Texts
		{
			get
			{
				return this.GetTable<Text>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ReassignTasks")]
		internal int ReassignTasks([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> boardId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> fromUserId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> toUserId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), boardId, fromUserId, toUserId);
			return ((int)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Boards")]
	internal partial class Board : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Description;
		
		private System.Nullable<int> _RefreshPeriod;
		
		private System.Nullable<int> _OrganizationId;
		
		private EntitySet<BoardsColor> _BoardsColors;
		
		private EntitySet<BoardsUser> _BoardsUsers;
		
		private EntitySet<Project> _Projects;
		
		private EntitySet<ProjectsUser> _ProjectsUsers;
		
		private EntitySet<Task> _Tasks;
		
		private EntitySet<TasksArchive> _TasksArchives;
		
		private EntitySet<TasksStatus> _TasksStatus;
		
		private EntityRef<Organization> _Organization;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnRefreshPeriodChanging(System.Nullable<int> value);
    partial void OnRefreshPeriodChanged();
    partial void OnOrganizationIdChanging(System.Nullable<int> value);
    partial void OnOrganizationIdChanged();
    #endregion
		
		public Board()
		{
			this._BoardsColors = new EntitySet<BoardsColor>(new Action<BoardsColor>(this.attach_BoardsColors), new Action<BoardsColor>(this.detach_BoardsColors));
			this._BoardsUsers = new EntitySet<BoardsUser>(new Action<BoardsUser>(this.attach_BoardsUsers), new Action<BoardsUser>(this.detach_BoardsUsers));
			this._Projects = new EntitySet<Project>(new Action<Project>(this.attach_Projects), new Action<Project>(this.detach_Projects));
			this._ProjectsUsers = new EntitySet<ProjectsUser>(new Action<ProjectsUser>(this.attach_ProjectsUsers), new Action<ProjectsUser>(this.detach_ProjectsUsers));
			this._Tasks = new EntitySet<Task>(new Action<Task>(this.attach_Tasks), new Action<Task>(this.detach_Tasks));
			this._TasksArchives = new EntitySet<TasksArchive>(new Action<TasksArchive>(this.attach_TasksArchives), new Action<TasksArchive>(this.detach_TasksArchives));
			this._TasksStatus = new EntitySet<TasksStatus>(new Action<TasksStatus>(this.attach_TasksStatus), new Action<TasksStatus>(this.detach_TasksStatus));
			this._Organization = default(EntityRef<Organization>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RefreshPeriod", DbType="Int")]
		public System.Nullable<int> RefreshPeriod
		{
			get
			{
				return this._RefreshPeriod;
			}
			set
			{
				if ((this._RefreshPeriod != value))
				{
					this.OnRefreshPeriodChanging(value);
					this.SendPropertyChanging();
					this._RefreshPeriod = value;
					this.SendPropertyChanged("RefreshPeriod");
					this.OnRefreshPeriodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrganizationId", DbType="Int")]
		public System.Nullable<int> OrganizationId
		{
			get
			{
				return this._OrganizationId;
			}
			set
			{
				if ((this._OrganizationId != value))
				{
					if (this._Organization.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrganizationIdChanging(value);
					this.SendPropertyChanging();
					this._OrganizationId = value;
					this.SendPropertyChanged("OrganizationId");
					this.OnOrganizationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Board_BoardsColor", Storage="_BoardsColors", ThisKey="Id", OtherKey="BoardId")]
		public EntitySet<BoardsColor> BoardsColors
		{
			get
			{
				return this._BoardsColors;
			}
			set
			{
				this._BoardsColors.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Board_BoardsUser", Storage="_BoardsUsers", ThisKey="Id", OtherKey="BoardId")]
		public EntitySet<BoardsUser> BoardsUsers
		{
			get
			{
				return this._BoardsUsers;
			}
			set
			{
				this._BoardsUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Board_Project", Storage="_Projects", ThisKey="Id", OtherKey="BoardId")]
		public EntitySet<Project> Projects
		{
			get
			{
				return this._Projects;
			}
			set
			{
				this._Projects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Board_ProjectsUser", Storage="_ProjectsUsers", ThisKey="Id", OtherKey="BoardId")]
		public EntitySet<ProjectsUser> ProjectsUsers
		{
			get
			{
				return this._ProjectsUsers;
			}
			set
			{
				this._ProjectsUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Board_Task", Storage="_Tasks", ThisKey="Id", OtherKey="BoardId")]
		public EntitySet<Task> Tasks
		{
			get
			{
				return this._Tasks;
			}
			set
			{
				this._Tasks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Board_TasksArchive", Storage="_TasksArchives", ThisKey="Id", OtherKey="BoardId")]
		public EntitySet<TasksArchive> TasksArchives
		{
			get
			{
				return this._TasksArchives;
			}
			set
			{
				this._TasksArchives.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Board_TasksStatus", Storage="_TasksStatus", ThisKey="Id", OtherKey="BoardId")]
		public EntitySet<TasksStatus> TasksStatus
		{
			get
			{
				return this._TasksStatus;
			}
			set
			{
				this._TasksStatus.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_Board", Storage="_Organization", ThisKey="OrganizationId", OtherKey="Id", IsForeignKey=true)]
		public Organization Organization
		{
			get
			{
				return this._Organization.Entity;
			}
			set
			{
				Organization previousValue = this._Organization.Entity;
				if (((previousValue != value) 
							|| (this._Organization.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organization.Entity = null;
						previousValue.Boards.Remove(this);
					}
					this._Organization.Entity = value;
					if ((value != null))
					{
						value.Boards.Add(this);
						this._OrganizationId = value.Id;
					}
					else
					{
						this._OrganizationId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Organization");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BoardsColors(BoardsColor entity)
		{
			this.SendPropertyChanging();
			entity.Board = this;
		}
		
		private void detach_BoardsColors(BoardsColor entity)
		{
			this.SendPropertyChanging();
			entity.Board = null;
		}
		
		private void attach_BoardsUsers(BoardsUser entity)
		{
			this.SendPropertyChanging();
			entity.Board = this;
		}
		
		private void detach_BoardsUsers(BoardsUser entity)
		{
			this.SendPropertyChanging();
			entity.Board = null;
		}
		
		private void attach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.Board = this;
		}
		
		private void detach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.Board = null;
		}
		
		private void attach_ProjectsUsers(ProjectsUser entity)
		{
			this.SendPropertyChanging();
			entity.Board = this;
		}
		
		private void detach_ProjectsUsers(ProjectsUser entity)
		{
			this.SendPropertyChanging();
			entity.Board = null;
		}
		
		private void attach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.Board = this;
		}
		
		private void detach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.Board = null;
		}
		
		private void attach_TasksArchives(TasksArchive entity)
		{
			this.SendPropertyChanging();
			entity.Board = this;
		}
		
		private void detach_TasksArchives(TasksArchive entity)
		{
			this.SendPropertyChanging();
			entity.Board = null;
		}
		
		private void attach_TasksStatus(TasksStatus entity)
		{
			this.SendPropertyChanging();
			entity.Board = this;
		}
		
		private void detach_TasksStatus(TasksStatus entity)
		{
			this.SendPropertyChanging();
			entity.Board = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UsersInvites")]
	internal partial class UsersInvite : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private string _EMail;
		
		private string _InviteCode;
		
		private System.DateTimeOffset _DateTime;
		
		private int _OrganizationId;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnEMailChanging(string value);
    partial void OnEMailChanged();
    partial void OnInviteCodeChanging(string value);
    partial void OnInviteCodeChanged();
    partial void OnDateTimeChanging(System.DateTimeOffset value);
    partial void OnDateTimeChanged();
    partial void OnOrganizationIdChanging(int value);
    partial void OnOrganizationIdChanged();
    #endregion
		
		public UsersInvite()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EMail", DbType="NVarChar(320) NOT NULL", CanBeNull=false)]
		public string EMail
		{
			get
			{
				return this._EMail;
			}
			set
			{
				if ((this._EMail != value))
				{
					this.OnEMailChanging(value);
					this.SendPropertyChanging();
					this._EMail = value;
					this.SendPropertyChanged("EMail");
					this.OnEMailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InviteCode", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string InviteCode
		{
			get
			{
				return this._InviteCode;
			}
			set
			{
				if ((this._InviteCode != value))
				{
					this.OnInviteCodeChanging(value);
					this.SendPropertyChanging();
					this._InviteCode = value;
					this.SendPropertyChanged("InviteCode");
					this.OnInviteCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateTime", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset DateTime
		{
			get
			{
				return this._DateTime;
			}
			set
			{
				if ((this._DateTime != value))
				{
					this.OnDateTimeChanging(value);
					this.SendPropertyChanging();
					this._DateTime = value;
					this.SendPropertyChanged("DateTime");
					this.OnDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrganizationId", DbType="Int NOT NULL")]
		public int OrganizationId
		{
			get
			{
				return this._OrganizationId;
			}
			set
			{
				if ((this._OrganizationId != value))
				{
					this.OnOrganizationIdChanging(value);
					this.SendPropertyChanging();
					this._OrganizationId = value;
					this.SendPropertyChanged("OrganizationId");
					this.OnOrganizationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UsersInvite", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UsersInvites.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UsersInvites.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BoardsColors")]
	internal partial class BoardsColor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Color;
		
		private int _BoardId;
		
		private int _Position;
		
		private bool _IsDefault;
		
		private EntitySet<Task> _Tasks;
		
		private EntitySet<TasksArchive> _TasksArchives;
		
		private EntityRef<Board> _Board;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnColorChanging(string value);
    partial void OnColorChanged();
    partial void OnBoardIdChanging(int value);
    partial void OnBoardIdChanged();
    partial void OnPositionChanging(int value);
    partial void OnPositionChanged();
    partial void OnIsDefaultChanging(bool value);
    partial void OnIsDefaultChanged();
    #endregion
		
		public BoardsColor()
		{
			this._Tasks = new EntitySet<Task>(new Action<Task>(this.attach_Tasks), new Action<Task>(this.detach_Tasks));
			this._TasksArchives = new EntitySet<TasksArchive>(new Action<TasksArchive>(this.attach_TasksArchives), new Action<TasksArchive>(this.detach_TasksArchives));
			this._Board = default(EntityRef<Board>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Color", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Color
		{
			get
			{
				return this._Color;
			}
			set
			{
				if ((this._Color != value))
				{
					this.OnColorChanging(value);
					this.SendPropertyChanging();
					this._Color = value;
					this.SendPropertyChanged("Color");
					this.OnColorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BoardId", DbType="Int NOT NULL")]
		public int BoardId
		{
			get
			{
				return this._BoardId;
			}
			set
			{
				if ((this._BoardId != value))
				{
					if (this._Board.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBoardIdChanging(value);
					this.SendPropertyChanging();
					this._BoardId = value;
					this.SendPropertyChanged("BoardId");
					this.OnBoardIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="Int NOT NULL")]
		public int Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDefault", DbType="Bit NOT NULL")]
		public bool IsDefault
		{
			get
			{
				return this._IsDefault;
			}
			set
			{
				if ((this._IsDefault != value))
				{
					this.OnIsDefaultChanging(value);
					this.SendPropertyChanging();
					this._IsDefault = value;
					this.SendPropertyChanged("IsDefault");
					this.OnIsDefaultChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BoardsColor_Task", Storage="_Tasks", ThisKey="Id", OtherKey="ColorId")]
		public EntitySet<Task> Tasks
		{
			get
			{
				return this._Tasks;
			}
			set
			{
				this._Tasks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BoardsColor_TasksArchive", Storage="_TasksArchives", ThisKey="Id", OtherKey="ColorId")]
		public EntitySet<TasksArchive> TasksArchives
		{
			get
			{
				return this._TasksArchives;
			}
			set
			{
				this._TasksArchives.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Board_BoardsColor", Storage="_Board", ThisKey="BoardId", OtherKey="Id", IsForeignKey=true)]
		public Board Board
		{
			get
			{
				return this._Board.Entity;
			}
			set
			{
				Board previousValue = this._Board.Entity;
				if (((previousValue != value) 
							|| (this._Board.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Board.Entity = null;
						previousValue.BoardsColors.Remove(this);
					}
					this._Board.Entity = value;
					if ((value != null))
					{
						value.BoardsColors.Add(this);
						this._BoardId = value.Id;
					}
					else
					{
						this._BoardId = default(int);
					}
					this.SendPropertyChanged("Board");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.BoardsColor = this;
		}
		
		private void detach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.BoardsColor = null;
		}
		
		private void attach_TasksArchives(TasksArchive entity)
		{
			this.SendPropertyChanging();
			entity.BoardsColor = this;
		}
		
		private void detach_TasksArchives(TasksArchive entity)
		{
			this.SendPropertyChanging();
			entity.BoardsColor = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BoardsUsers")]
	internal partial class BoardsUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private int _BoardId;
		
		private int _UserRole;
		
		private bool _IsActive;
		
		private EntityRef<Board> _Board;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnBoardIdChanging(int value);
    partial void OnBoardIdChanged();
    partial void OnUserRoleChanging(int value);
    partial void OnUserRoleChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
		
		public BoardsUser()
		{
			this._Board = default(EntityRef<Board>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BoardId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int BoardId
		{
			get
			{
				return this._BoardId;
			}
			set
			{
				if ((this._BoardId != value))
				{
					if (this._Board.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBoardIdChanging(value);
					this.SendPropertyChanging();
					this._BoardId = value;
					this.SendPropertyChanged("BoardId");
					this.OnBoardIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserRole", DbType="Int NOT NULL")]
		public int UserRole
		{
			get
			{
				return this._UserRole;
			}
			set
			{
				if ((this._UserRole != value))
				{
					this.OnUserRoleChanging(value);
					this.SendPropertyChanging();
					this._UserRole = value;
					this.SendPropertyChanged("UserRole");
					this.OnUserRoleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Board_BoardsUser", Storage="_Board", ThisKey="BoardId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Board Board
		{
			get
			{
				return this._Board.Entity;
			}
			set
			{
				Board previousValue = this._Board.Entity;
				if (((previousValue != value) 
							|| (this._Board.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Board.Entity = null;
						previousValue.BoardsUsers.Remove(this);
					}
					this._Board.Entity = value;
					if ((value != null))
					{
						value.BoardsUsers.Add(this);
						this._BoardId = value.Id;
					}
					else
					{
						this._BoardId = default(int);
					}
					this.SendPropertyChanged("Board");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_BoardsUser", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.BoardsUsers.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.BoardsUsers.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EventHistory")]
	internal partial class EventHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.DateTimeOffset _EventDateTime;
		
		private int _TaskId;
		
		private string _TaskName;
		
		private int _UserId;
		
		private string _UserNick;
		
		private string _Event;
		
		private int _EventType;
		
		private int _ProjectId;
		
		private string _ProjectName;
		
		private int _BoardId;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnEventDateTimeChanging(System.DateTimeOffset value);
    partial void OnEventDateTimeChanged();
    partial void OnTaskIdChanging(int value);
    partial void OnTaskIdChanged();
    partial void OnTaskNameChanging(string value);
    partial void OnTaskNameChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnUserNickChanging(string value);
    partial void OnUserNickChanged();
    partial void OnEventChanging(string value);
    partial void OnEventChanged();
    partial void OnEventTypeChanging(int value);
    partial void OnEventTypeChanged();
    partial void OnProjectIdChanging(int value);
    partial void OnProjectIdChanged();
    partial void OnProjectNameChanging(string value);
    partial void OnProjectNameChanged();
    partial void OnBoardIdChanging(int value);
    partial void OnBoardIdChanged();
    #endregion
		
		public EventHistory()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventDateTime", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset EventDateTime
		{
			get
			{
				return this._EventDateTime;
			}
			set
			{
				if ((this._EventDateTime != value))
				{
					this.OnEventDateTimeChanging(value);
					this.SendPropertyChanging();
					this._EventDateTime = value;
					this.SendPropertyChanged("EventDateTime");
					this.OnEventDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskId", DbType="Int NOT NULL")]
		public int TaskId
		{
			get
			{
				return this._TaskId;
			}
			set
			{
				if ((this._TaskId != value))
				{
					this.OnTaskIdChanging(value);
					this.SendPropertyChanging();
					this._TaskId = value;
					this.SendPropertyChanged("TaskId");
					this.OnTaskIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string TaskName
		{
			get
			{
				return this._TaskName;
			}
			set
			{
				if ((this._TaskName != value))
				{
					this.OnTaskNameChanging(value);
					this.SendPropertyChanging();
					this._TaskName = value;
					this.SendPropertyChanged("TaskName");
					this.OnTaskNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserNick", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UserNick
		{
			get
			{
				return this._UserNick;
			}
			set
			{
				if ((this._UserNick != value))
				{
					this.OnUserNickChanging(value);
					this.SendPropertyChanging();
					this._UserNick = value;
					this.SendPropertyChanged("UserNick");
					this.OnUserNickChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Event", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Event
		{
			get
			{
				return this._Event;
			}
			set
			{
				if ((this._Event != value))
				{
					this.OnEventChanging(value);
					this.SendPropertyChanging();
					this._Event = value;
					this.SendPropertyChanged("Event");
					this.OnEventChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventType", DbType="Int NOT NULL")]
		public int EventType
		{
			get
			{
				return this._EventType;
			}
			set
			{
				if ((this._EventType != value))
				{
					this.OnEventTypeChanging(value);
					this.SendPropertyChanging();
					this._EventType = value;
					this.SendPropertyChanged("EventType");
					this.OnEventTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectId", DbType="Int NOT NULL")]
		public int ProjectId
		{
			get
			{
				return this._ProjectId;
			}
			set
			{
				if ((this._ProjectId != value))
				{
					this.OnProjectIdChanging(value);
					this.SendPropertyChanging();
					this._ProjectId = value;
					this.SendPropertyChanged("ProjectId");
					this.OnProjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ProjectName
		{
			get
			{
				return this._ProjectName;
			}
			set
			{
				if ((this._ProjectName != value))
				{
					this.OnProjectNameChanging(value);
					this.SendPropertyChanging();
					this._ProjectName = value;
					this.SendPropertyChanged("ProjectName");
					this.OnProjectNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BoardId", DbType="Int NOT NULL")]
		public int BoardId
		{
			get
			{
				return this._BoardId;
			}
			set
			{
				if ((this._BoardId != value))
				{
					this.OnBoardIdChanging(value);
					this.SendPropertyChanging();
					this._BoardId = value;
					this.SendPropertyChanged("BoardId");
					this.OnBoardIdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Organizations")]
	internal partial class Organization : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private int _TariffId;
		
		private bool _IsFree;
		
		private string _Css;
		
		private string _Logo;
		
		private decimal _Money;
		
		private System.Nullable<System.DateTimeOffset> _WithdrawalDate;
		
		private bool _IsBlocked;
		
		private string _InviteCode;
		
		private EntitySet<Board> _Boards;
		
		private EntitySet<OrganizationUser> _OrganizationUsers;
		
		private EntityRef<Tariff> _Tariff;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTariffIdChanging(int value);
    partial void OnTariffIdChanged();
    partial void OnIsFreeChanging(bool value);
    partial void OnIsFreeChanged();
    partial void OnCssChanging(string value);
    partial void OnCssChanged();
    partial void OnLogoChanging(string value);
    partial void OnLogoChanged();
    partial void OnMoneyChanging(decimal value);
    partial void OnMoneyChanged();
    partial void OnWithdrawalDateChanging(System.Nullable<System.DateTimeOffset> value);
    partial void OnWithdrawalDateChanged();
    partial void OnIsBlockedChanging(bool value);
    partial void OnIsBlockedChanged();
    partial void OnInviteCodeChanging(string value);
    partial void OnInviteCodeChanged();
    #endregion
		
		public Organization()
		{
			this._Boards = new EntitySet<Board>(new Action<Board>(this.attach_Boards), new Action<Board>(this.detach_Boards));
			this._OrganizationUsers = new EntitySet<OrganizationUser>(new Action<OrganizationUser>(this.attach_OrganizationUsers), new Action<OrganizationUser>(this.detach_OrganizationUsers));
			this._Tariff = default(EntityRef<Tariff>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TariffId", DbType="Int NOT NULL")]
		public int TariffId
		{
			get
			{
				return this._TariffId;
			}
			set
			{
				if ((this._TariffId != value))
				{
					if (this._Tariff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTariffIdChanging(value);
					this.SendPropertyChanging();
					this._TariffId = value;
					this.SendPropertyChanged("TariffId");
					this.OnTariffIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsFree", DbType="Bit NOT NULL")]
		public bool IsFree
		{
			get
			{
				return this._IsFree;
			}
			set
			{
				if ((this._IsFree != value))
				{
					this.OnIsFreeChanging(value);
					this.SendPropertyChanging();
					this._IsFree = value;
					this.SendPropertyChanged("IsFree");
					this.OnIsFreeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Css", DbType="NVarChar(500)")]
		public string Css
		{
			get
			{
				return this._Css;
			}
			set
			{
				if ((this._Css != value))
				{
					this.OnCssChanging(value);
					this.SendPropertyChanging();
					this._Css = value;
					this.SendPropertyChanged("Css");
					this.OnCssChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Logo", DbType="NVarChar(500)")]
		public string Logo
		{
			get
			{
				return this._Logo;
			}
			set
			{
				if ((this._Logo != value))
				{
					this.OnLogoChanging(value);
					this.SendPropertyChanging();
					this._Logo = value;
					this.SendPropertyChanged("Logo");
					this.OnLogoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Money", DbType="Money NOT NULL")]
		public decimal Money
		{
			get
			{
				return this._Money;
			}
			set
			{
				if ((this._Money != value))
				{
					this.OnMoneyChanging(value);
					this.SendPropertyChanging();
					this._Money = value;
					this.SendPropertyChanged("Money");
					this.OnMoneyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WithdrawalDate", DbType="DateTimeOffset")]
		public System.Nullable<System.DateTimeOffset> WithdrawalDate
		{
			get
			{
				return this._WithdrawalDate;
			}
			set
			{
				if ((this._WithdrawalDate != value))
				{
					this.OnWithdrawalDateChanging(value);
					this.SendPropertyChanging();
					this._WithdrawalDate = value;
					this.SendPropertyChanged("WithdrawalDate");
					this.OnWithdrawalDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsBlocked", DbType="Bit NOT NULL")]
		public bool IsBlocked
		{
			get
			{
				return this._IsBlocked;
			}
			set
			{
				if ((this._IsBlocked != value))
				{
					this.OnIsBlockedChanging(value);
					this.SendPropertyChanging();
					this._IsBlocked = value;
					this.SendPropertyChanged("IsBlocked");
					this.OnIsBlockedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InviteCode", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string InviteCode
		{
			get
			{
				return this._InviteCode;
			}
			set
			{
				if ((this._InviteCode != value))
				{
					this.OnInviteCodeChanging(value);
					this.SendPropertyChanging();
					this._InviteCode = value;
					this.SendPropertyChanged("InviteCode");
					this.OnInviteCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_Board", Storage="_Boards", ThisKey="Id", OtherKey="OrganizationId")]
		public EntitySet<Board> Boards
		{
			get
			{
				return this._Boards;
			}
			set
			{
				this._Boards.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_OrganizationUser", Storage="_OrganizationUsers", ThisKey="Id", OtherKey="OrganizationId")]
		public EntitySet<OrganizationUser> OrganizationUsers
		{
			get
			{
				return this._OrganizationUsers;
			}
			set
			{
				this._OrganizationUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tariff_Organization", Storage="_Tariff", ThisKey="TariffId", OtherKey="Id", IsForeignKey=true)]
		public Tariff Tariff
		{
			get
			{
				return this._Tariff.Entity;
			}
			set
			{
				Tariff previousValue = this._Tariff.Entity;
				if (((previousValue != value) 
							|| (this._Tariff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tariff.Entity = null;
						previousValue.Organizations.Remove(this);
					}
					this._Tariff.Entity = value;
					if ((value != null))
					{
						value.Organizations.Add(this);
						this._TariffId = value.Id;
					}
					else
					{
						this._TariffId = default(int);
					}
					this.SendPropertyChanged("Tariff");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Boards(Board entity)
		{
			this.SendPropertyChanging();
			entity.Organization = this;
		}
		
		private void detach_Boards(Board entity)
		{
			this.SendPropertyChanging();
			entity.Organization = null;
		}
		
		private void attach_OrganizationUsers(OrganizationUser entity)
		{
			this.SendPropertyChanging();
			entity.Organization = this;
		}
		
		private void detach_OrganizationUsers(OrganizationUser entity)
		{
			this.SendPropertyChanging();
			entity.Organization = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrganizationUsers")]
	internal partial class OrganizationUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _UserId;
		
		private int _OrganizationId;
		
		private bool _IsApproved;
		
		private int _UserRole;
		
		private EntityRef<Organization> _Organization;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnOrganizationIdChanging(int value);
    partial void OnOrganizationIdChanged();
    partial void OnIsApprovedChanging(bool value);
    partial void OnIsApprovedChanged();
    partial void OnUserRoleChanging(int value);
    partial void OnUserRoleChanged();
    #endregion
		
		public OrganizationUser()
		{
			this._Organization = default(EntityRef<Organization>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrganizationId", DbType="Int NOT NULL")]
		public int OrganizationId
		{
			get
			{
				return this._OrganizationId;
			}
			set
			{
				if ((this._OrganizationId != value))
				{
					if (this._Organization.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrganizationIdChanging(value);
					this.SendPropertyChanging();
					this._OrganizationId = value;
					this.SendPropertyChanged("OrganizationId");
					this.OnOrganizationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsApproved", DbType="Bit NOT NULL")]
		public bool IsApproved
		{
			get
			{
				return this._IsApproved;
			}
			set
			{
				if ((this._IsApproved != value))
				{
					this.OnIsApprovedChanging(value);
					this.SendPropertyChanging();
					this._IsApproved = value;
					this.SendPropertyChanged("IsApproved");
					this.OnIsApprovedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserRole", DbType="Int NOT NULL")]
		public int UserRole
		{
			get
			{
				return this._UserRole;
			}
			set
			{
				if ((this._UserRole != value))
				{
					this.OnUserRoleChanging(value);
					this.SendPropertyChanging();
					this._UserRole = value;
					this.SendPropertyChanged("UserRole");
					this.OnUserRoleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_OrganizationUser", Storage="_Organization", ThisKey="OrganizationId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Organization Organization
		{
			get
			{
				return this._Organization.Entity;
			}
			set
			{
				Organization previousValue = this._Organization.Entity;
				if (((previousValue != value) 
							|| (this._Organization.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organization.Entity = null;
						previousValue.OrganizationUsers.Remove(this);
					}
					this._Organization.Entity = value;
					if ((value != null))
					{
						value.OrganizationUsers.Add(this);
						this._OrganizationId = value.Id;
					}
					else
					{
						this._OrganizationId = default(int);
					}
					this.SendPropertyChanged("Organization");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_OrganizationUser", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.OrganizationUsers.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.OrganizationUsers.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Projects")]
	internal partial class Project : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private int _BoardId;
		
		private EntitySet<ProjectsUser> _ProjectsUsers;
		
		private EntitySet<Task> _Tasks;
		
		private EntitySet<TasksArchive> _TasksArchives;
		
		private EntityRef<Board> _Board;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnBoardIdChanging(int value);
    partial void OnBoardIdChanged();
    #endregion
		
		public Project()
		{
			this._ProjectsUsers = new EntitySet<ProjectsUser>(new Action<ProjectsUser>(this.attach_ProjectsUsers), new Action<ProjectsUser>(this.detach_ProjectsUsers));
			this._Tasks = new EntitySet<Task>(new Action<Task>(this.attach_Tasks), new Action<Task>(this.detach_Tasks));
			this._TasksArchives = new EntitySet<TasksArchive>(new Action<TasksArchive>(this.attach_TasksArchives), new Action<TasksArchive>(this.detach_TasksArchives));
			this._Board = default(EntityRef<Board>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BoardId", DbType="Int NOT NULL")]
		public int BoardId
		{
			get
			{
				return this._BoardId;
			}
			set
			{
				if ((this._BoardId != value))
				{
					if (this._Board.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBoardIdChanging(value);
					this.SendPropertyChanging();
					this._BoardId = value;
					this.SendPropertyChanged("BoardId");
					this.OnBoardIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ProjectsUser", Storage="_ProjectsUsers", ThisKey="Id", OtherKey="ProjectId")]
		public EntitySet<ProjectsUser> ProjectsUsers
		{
			get
			{
				return this._ProjectsUsers;
			}
			set
			{
				this._ProjectsUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_Task", Storage="_Tasks", ThisKey="Id", OtherKey="ProjectId")]
		public EntitySet<Task> Tasks
		{
			get
			{
				return this._Tasks;
			}
			set
			{
				this._Tasks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_TasksArchive", Storage="_TasksArchives", ThisKey="Id", OtherKey="ProjectId")]
		public EntitySet<TasksArchive> TasksArchives
		{
			get
			{
				return this._TasksArchives;
			}
			set
			{
				this._TasksArchives.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Board_Project", Storage="_Board", ThisKey="BoardId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Board Board
		{
			get
			{
				return this._Board.Entity;
			}
			set
			{
				Board previousValue = this._Board.Entity;
				if (((previousValue != value) 
							|| (this._Board.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Board.Entity = null;
						previousValue.Projects.Remove(this);
					}
					this._Board.Entity = value;
					if ((value != null))
					{
						value.Projects.Add(this);
						this._BoardId = value.Id;
					}
					else
					{
						this._BoardId = default(int);
					}
					this.SendPropertyChanged("Board");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProjectsUsers(ProjectsUser entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_ProjectsUsers(ProjectsUser entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
		
		private void attach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
		
		private void attach_TasksArchives(TasksArchive entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_TasksArchives(TasksArchive entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProjectsUsers")]
	internal partial class ProjectsUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private int _ProjectId;
		
		private int _BoardId;
		
		private int _ReciveEMail;
		
		private EntityRef<Board> _Board;
		
		private EntityRef<Project> _Project;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnProjectIdChanging(int value);
    partial void OnProjectIdChanged();
    partial void OnBoardIdChanging(int value);
    partial void OnBoardIdChanged();
    partial void OnReciveEMailChanging(int value);
    partial void OnReciveEMailChanged();
    #endregion
		
		public ProjectsUser()
		{
			this._Board = default(EntityRef<Board>);
			this._Project = default(EntityRef<Project>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProjectId
		{
			get
			{
				return this._ProjectId;
			}
			set
			{
				if ((this._ProjectId != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIdChanging(value);
					this.SendPropertyChanging();
					this._ProjectId = value;
					this.SendPropertyChanged("ProjectId");
					this.OnProjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BoardId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int BoardId
		{
			get
			{
				return this._BoardId;
			}
			set
			{
				if ((this._BoardId != value))
				{
					if (this._Board.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBoardIdChanging(value);
					this.SendPropertyChanging();
					this._BoardId = value;
					this.SendPropertyChanged("BoardId");
					this.OnBoardIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReciveEMail", DbType="Int NOT NULL")]
		public int ReciveEMail
		{
			get
			{
				return this._ReciveEMail;
			}
			set
			{
				if ((this._ReciveEMail != value))
				{
					this.OnReciveEMailChanging(value);
					this.SendPropertyChanging();
					this._ReciveEMail = value;
					this.SendPropertyChanged("ReciveEMail");
					this.OnReciveEMailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Board_ProjectsUser", Storage="_Board", ThisKey="BoardId", OtherKey="Id", IsForeignKey=true)]
		public Board Board
		{
			get
			{
				return this._Board.Entity;
			}
			set
			{
				Board previousValue = this._Board.Entity;
				if (((previousValue != value) 
							|| (this._Board.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Board.Entity = null;
						previousValue.ProjectsUsers.Remove(this);
					}
					this._Board.Entity = value;
					if ((value != null))
					{
						value.ProjectsUsers.Add(this);
						this._BoardId = value.Id;
					}
					else
					{
						this._BoardId = default(int);
					}
					this.SendPropertyChanged("Board");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ProjectsUser", Storage="_Project", ThisKey="ProjectId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.ProjectsUsers.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.ProjectsUsers.Add(this);
						this._ProjectId = value.Id;
					}
					else
					{
						this._ProjectId = default(int);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ProjectsUser", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.ProjectsUsers.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.ProjectsUsers.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tariffs")]
	internal partial class Tariff : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private decimal _Price;
		
		private System.Nullable<int> _BoardsCount;
		
		private System.Nullable<int> _ProjectsPerBoard;
		
		private System.Nullable<int> _EmployeesCount;
		
		private int _Flags;
		
		private EntitySet<Organization> _Organizations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPriceChanging(decimal value);
    partial void OnPriceChanged();
    partial void OnBoardsCountChanging(System.Nullable<int> value);
    partial void OnBoardsCountChanged();
    partial void OnProjectsPerBoardChanging(System.Nullable<int> value);
    partial void OnProjectsPerBoardChanged();
    partial void OnEmployeesCountChanging(System.Nullable<int> value);
    partial void OnEmployeesCountChanged();
    partial void OnFlagsChanging(int value);
    partial void OnFlagsChanged();
    #endregion
		
		public Tariff()
		{
			this._Organizations = new EntitySet<Organization>(new Action<Organization>(this.attach_Organizations), new Action<Organization>(this.detach_Organizations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Money NOT NULL")]
		public decimal Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BoardsCount", DbType="Int")]
		public System.Nullable<int> BoardsCount
		{
			get
			{
				return this._BoardsCount;
			}
			set
			{
				if ((this._BoardsCount != value))
				{
					this.OnBoardsCountChanging(value);
					this.SendPropertyChanging();
					this._BoardsCount = value;
					this.SendPropertyChanged("BoardsCount");
					this.OnBoardsCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectsPerBoard", DbType="Int")]
		public System.Nullable<int> ProjectsPerBoard
		{
			get
			{
				return this._ProjectsPerBoard;
			}
			set
			{
				if ((this._ProjectsPerBoard != value))
				{
					this.OnProjectsPerBoardChanging(value);
					this.SendPropertyChanging();
					this._ProjectsPerBoard = value;
					this.SendPropertyChanged("ProjectsPerBoard");
					this.OnProjectsPerBoardChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeesCount", DbType="Int")]
		public System.Nullable<int> EmployeesCount
		{
			get
			{
				return this._EmployeesCount;
			}
			set
			{
				if ((this._EmployeesCount != value))
				{
					this.OnEmployeesCountChanging(value);
					this.SendPropertyChanging();
					this._EmployeesCount = value;
					this.SendPropertyChanged("EmployeesCount");
					this.OnEmployeesCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Flags", DbType="Int NOT NULL")]
		public int Flags
		{
			get
			{
				return this._Flags;
			}
			set
			{
				if ((this._Flags != value))
				{
					this.OnFlagsChanging(value);
					this.SendPropertyChanging();
					this._Flags = value;
					this.SendPropertyChanged("Flags");
					this.OnFlagsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tariff_Organization", Storage="_Organizations", ThisKey="Id", OtherKey="TariffId")]
		public EntitySet<Organization> Organizations
		{
			get
			{
				return this._Organizations;
			}
			set
			{
				this._Organizations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Organizations(Organization entity)
		{
			this.SendPropertyChanging();
			entity.Tariff = this;
		}
		
		private void detach_Organizations(Organization entity)
		{
			this.SendPropertyChanging();
			entity.Tariff = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tasks")]
	internal partial class Task : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Description;
		
		private int _BoardId;
		
		private int _CreatorUserId;
		
		private System.DateTimeOffset _CreationDateTime;
		
		private System.DateTimeOffset _StatusChangeDateTime;
		
		private System.Nullable<int> _PlanningTime;
		
		private int _ColorId;
		
		private string _ColorHEX;
		
		private string _ColorName;
		
		private int _ColorPosition;
		
		private int _ProjectId;
		
		private string _ProjectName;
		
		private int _ExecutorUserId;
		
		private string _ExecutorNick;
		
		private string _ExecutorEmail;
		
		private int _TaskStatusId;
		
		private int _TaskStatusPosition;
		
		private string _TaskStatusName;
		
		private bool _IsDeleted;
		
		private EntitySet<TasksArchive> _TasksArchives;
		
		private EntitySet<TasksComment> _TasksComments;
		
		private EntityRef<Board> _Board;
		
		private EntityRef<BoardsColor> _BoardsColor;
		
		private EntityRef<Project> _Project;
		
		private EntityRef<TasksStatus> _TasksStatus;
		
		private EntityRef<User> _User;
		
		private EntityRef<User> _User1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnBoardIdChanging(int value);
    partial void OnBoardIdChanged();
    partial void OnCreatorUserIdChanging(int value);
    partial void OnCreatorUserIdChanged();
    partial void OnCreationDateTimeChanging(System.DateTimeOffset value);
    partial void OnCreationDateTimeChanged();
    partial void OnStatusChangeDateTimeChanging(System.DateTimeOffset value);
    partial void OnStatusChangeDateTimeChanged();
    partial void OnPlanningTimeChanging(System.Nullable<int> value);
    partial void OnPlanningTimeChanged();
    partial void OnColorIdChanging(int value);
    partial void OnColorIdChanged();
    partial void OnColorHEXChanging(string value);
    partial void OnColorHEXChanged();
    partial void OnColorNameChanging(string value);
    partial void OnColorNameChanged();
    partial void OnColorPositionChanging(int value);
    partial void OnColorPositionChanged();
    partial void OnProjectIdChanging(int value);
    partial void OnProjectIdChanged();
    partial void OnProjectNameChanging(string value);
    partial void OnProjectNameChanged();
    partial void OnExecutorUserIdChanging(int value);
    partial void OnExecutorUserIdChanged();
    partial void OnExecutorNickChanging(string value);
    partial void OnExecutorNickChanged();
    partial void OnExecutorEmailChanging(string value);
    partial void OnExecutorEmailChanged();
    partial void OnTaskStatusIdChanging(int value);
    partial void OnTaskStatusIdChanged();
    partial void OnTaskStatusPositionChanging(int value);
    partial void OnTaskStatusPositionChanged();
    partial void OnTaskStatusNameChanging(string value);
    partial void OnTaskStatusNameChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public Task()
		{
			this._TasksArchives = new EntitySet<TasksArchive>(new Action<TasksArchive>(this.attach_TasksArchives), new Action<TasksArchive>(this.detach_TasksArchives));
			this._TasksComments = new EntitySet<TasksComment>(new Action<TasksComment>(this.attach_TasksComments), new Action<TasksComment>(this.detach_TasksComments));
			this._Board = default(EntityRef<Board>);
			this._BoardsColor = default(EntityRef<BoardsColor>);
			this._Project = default(EntityRef<Project>);
			this._TasksStatus = default(EntityRef<TasksStatus>);
			this._User = default(EntityRef<User>);
			this._User1 = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BoardId", DbType="Int NOT NULL")]
		public int BoardId
		{
			get
			{
				return this._BoardId;
			}
			set
			{
				if ((this._BoardId != value))
				{
					if (this._Board.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBoardIdChanging(value);
					this.SendPropertyChanging();
					this._BoardId = value;
					this.SendPropertyChanged("BoardId");
					this.OnBoardIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatorUserId", DbType="Int NOT NULL")]
		public int CreatorUserId
		{
			get
			{
				return this._CreatorUserId;
			}
			set
			{
				if ((this._CreatorUserId != value))
				{
					if (this._User1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatorUserIdChanging(value);
					this.SendPropertyChanging();
					this._CreatorUserId = value;
					this.SendPropertyChanged("CreatorUserId");
					this.OnCreatorUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationDateTime", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset CreationDateTime
		{
			get
			{
				return this._CreationDateTime;
			}
			set
			{
				if ((this._CreationDateTime != value))
				{
					this.OnCreationDateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreationDateTime = value;
					this.SendPropertyChanged("CreationDateTime");
					this.OnCreationDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusChangeDateTime", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset StatusChangeDateTime
		{
			get
			{
				return this._StatusChangeDateTime;
			}
			set
			{
				if ((this._StatusChangeDateTime != value))
				{
					this.OnStatusChangeDateTimeChanging(value);
					this.SendPropertyChanging();
					this._StatusChangeDateTime = value;
					this.SendPropertyChanged("StatusChangeDateTime");
					this.OnStatusChangeDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlanningTime", DbType="Int")]
		public System.Nullable<int> PlanningTime
		{
			get
			{
				return this._PlanningTime;
			}
			set
			{
				if ((this._PlanningTime != value))
				{
					this.OnPlanningTimeChanging(value);
					this.SendPropertyChanging();
					this._PlanningTime = value;
					this.SendPropertyChanged("PlanningTime");
					this.OnPlanningTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ColorId", DbType="Int NOT NULL")]
		public int ColorId
		{
			get
			{
				return this._ColorId;
			}
			set
			{
				if ((this._ColorId != value))
				{
					if (this._BoardsColor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnColorIdChanging(value);
					this.SendPropertyChanging();
					this._ColorId = value;
					this.SendPropertyChanged("ColorId");
					this.OnColorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ColorHEX", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ColorHEX
		{
			get
			{
				return this._ColorHEX;
			}
			set
			{
				if ((this._ColorHEX != value))
				{
					this.OnColorHEXChanging(value);
					this.SendPropertyChanging();
					this._ColorHEX = value;
					this.SendPropertyChanged("ColorHEX");
					this.OnColorHEXChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ColorName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ColorName
		{
			get
			{
				return this._ColorName;
			}
			set
			{
				if ((this._ColorName != value))
				{
					this.OnColorNameChanging(value);
					this.SendPropertyChanging();
					this._ColorName = value;
					this.SendPropertyChanged("ColorName");
					this.OnColorNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ColorPosition", DbType="Int NOT NULL")]
		public int ColorPosition
		{
			get
			{
				return this._ColorPosition;
			}
			set
			{
				if ((this._ColorPosition != value))
				{
					this.OnColorPositionChanging(value);
					this.SendPropertyChanging();
					this._ColorPosition = value;
					this.SendPropertyChanged("ColorPosition");
					this.OnColorPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectId", DbType="Int NOT NULL")]
		public int ProjectId
		{
			get
			{
				return this._ProjectId;
			}
			set
			{
				if ((this._ProjectId != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIdChanging(value);
					this.SendPropertyChanging();
					this._ProjectId = value;
					this.SendPropertyChanged("ProjectId");
					this.OnProjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ProjectName
		{
			get
			{
				return this._ProjectName;
			}
			set
			{
				if ((this._ProjectName != value))
				{
					this.OnProjectNameChanging(value);
					this.SendPropertyChanging();
					this._ProjectName = value;
					this.SendPropertyChanged("ProjectName");
					this.OnProjectNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExecutorUserId", DbType="Int NOT NULL")]
		public int ExecutorUserId
		{
			get
			{
				return this._ExecutorUserId;
			}
			set
			{
				if ((this._ExecutorUserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExecutorUserIdChanging(value);
					this.SendPropertyChanging();
					this._ExecutorUserId = value;
					this.SendPropertyChanged("ExecutorUserId");
					this.OnExecutorUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExecutorNick", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ExecutorNick
		{
			get
			{
				return this._ExecutorNick;
			}
			set
			{
				if ((this._ExecutorNick != value))
				{
					this.OnExecutorNickChanging(value);
					this.SendPropertyChanging();
					this._ExecutorNick = value;
					this.SendPropertyChanged("ExecutorNick");
					this.OnExecutorNickChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExecutorEmail", DbType="NVarChar(320) NOT NULL", CanBeNull=false)]
		public string ExecutorEmail
		{
			get
			{
				return this._ExecutorEmail;
			}
			set
			{
				if ((this._ExecutorEmail != value))
				{
					this.OnExecutorEmailChanging(value);
					this.SendPropertyChanging();
					this._ExecutorEmail = value;
					this.SendPropertyChanged("ExecutorEmail");
					this.OnExecutorEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskStatusId", DbType="Int NOT NULL")]
		public int TaskStatusId
		{
			get
			{
				return this._TaskStatusId;
			}
			set
			{
				if ((this._TaskStatusId != value))
				{
					if (this._TasksStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaskStatusIdChanging(value);
					this.SendPropertyChanging();
					this._TaskStatusId = value;
					this.SendPropertyChanged("TaskStatusId");
					this.OnTaskStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskStatusPosition", DbType="Int NOT NULL")]
		public int TaskStatusPosition
		{
			get
			{
				return this._TaskStatusPosition;
			}
			set
			{
				if ((this._TaskStatusPosition != value))
				{
					this.OnTaskStatusPositionChanging(value);
					this.SendPropertyChanging();
					this._TaskStatusPosition = value;
					this.SendPropertyChanged("TaskStatusPosition");
					this.OnTaskStatusPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskStatusName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string TaskStatusName
		{
			get
			{
				return this._TaskStatusName;
			}
			set
			{
				if ((this._TaskStatusName != value))
				{
					this.OnTaskStatusNameChanging(value);
					this.SendPropertyChanging();
					this._TaskStatusName = value;
					this.SendPropertyChanged("TaskStatusName");
					this.OnTaskStatusNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task_TasksArchive", Storage="_TasksArchives", ThisKey="Id", OtherKey="Id")]
		public EntitySet<TasksArchive> TasksArchives
		{
			get
			{
				return this._TasksArchives;
			}
			set
			{
				this._TasksArchives.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task_TasksComment", Storage="_TasksComments", ThisKey="Id", OtherKey="TaskId")]
		public EntitySet<TasksComment> TasksComments
		{
			get
			{
				return this._TasksComments;
			}
			set
			{
				this._TasksComments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Board_Task", Storage="_Board", ThisKey="BoardId", OtherKey="Id", IsForeignKey=true)]
		public Board Board
		{
			get
			{
				return this._Board.Entity;
			}
			set
			{
				Board previousValue = this._Board.Entity;
				if (((previousValue != value) 
							|| (this._Board.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Board.Entity = null;
						previousValue.Tasks.Remove(this);
					}
					this._Board.Entity = value;
					if ((value != null))
					{
						value.Tasks.Add(this);
						this._BoardId = value.Id;
					}
					else
					{
						this._BoardId = default(int);
					}
					this.SendPropertyChanged("Board");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BoardsColor_Task", Storage="_BoardsColor", ThisKey="ColorId", OtherKey="Id", IsForeignKey=true)]
		public BoardsColor BoardsColor
		{
			get
			{
				return this._BoardsColor.Entity;
			}
			set
			{
				BoardsColor previousValue = this._BoardsColor.Entity;
				if (((previousValue != value) 
							|| (this._BoardsColor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BoardsColor.Entity = null;
						previousValue.Tasks.Remove(this);
					}
					this._BoardsColor.Entity = value;
					if ((value != null))
					{
						value.Tasks.Add(this);
						this._ColorId = value.Id;
					}
					else
					{
						this._ColorId = default(int);
					}
					this.SendPropertyChanged("BoardsColor");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_Task", Storage="_Project", ThisKey="ProjectId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.Tasks.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.Tasks.Add(this);
						this._ProjectId = value.Id;
					}
					else
					{
						this._ProjectId = default(int);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TasksStatus_Task", Storage="_TasksStatus", ThisKey="TaskStatusId", OtherKey="Id", IsForeignKey=true)]
		public TasksStatus TasksStatus
		{
			get
			{
				return this._TasksStatus.Entity;
			}
			set
			{
				TasksStatus previousValue = this._TasksStatus.Entity;
				if (((previousValue != value) 
							|| (this._TasksStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TasksStatus.Entity = null;
						previousValue.Tasks.Remove(this);
					}
					this._TasksStatus.Entity = value;
					if ((value != null))
					{
						value.Tasks.Add(this);
						this._TaskStatusId = value.Id;
					}
					else
					{
						this._TaskStatusId = default(int);
					}
					this.SendPropertyChanged("TasksStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Task", Storage="_User", ThisKey="ExecutorUserId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Tasks.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Tasks.Add(this);
						this._ExecutorUserId = value.Id;
					}
					else
					{
						this._ExecutorUserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Task1", Storage="_User1", ThisKey="CreatorUserId", OtherKey="Id", IsForeignKey=true)]
		public User User1
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.Tasks1.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.Tasks1.Add(this);
						this._CreatorUserId = value.Id;
					}
					else
					{
						this._CreatorUserId = default(int);
					}
					this.SendPropertyChanged("User1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TasksArchives(TasksArchive entity)
		{
			this.SendPropertyChanging();
			entity.Task = this;
		}
		
		private void detach_TasksArchives(TasksArchive entity)
		{
			this.SendPropertyChanging();
			entity.Task = null;
		}
		
		private void attach_TasksComments(TasksComment entity)
		{
			this.SendPropertyChanging();
			entity.Task = this;
		}
		
		private void detach_TasksComments(TasksComment entity)
		{
			this.SendPropertyChanging();
			entity.Task = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TasksArchive")]
	internal partial class TasksArchive : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ArchiveId;
		
		private int _Id;
		
		private string _Name;
		
		private string _Description;
		
		private int _BoardId;
		
		private int _CreatorUserId;
		
		private System.DateTimeOffset _CreationDateTime;
		
		private System.DateTimeOffset _StatusChangeDateTime;
		
		private System.Nullable<int> _PlanningTime;
		
		private int _ColorId;
		
		private string _ColorHEX;
		
		private string _ColorName;
		
		private int _ColorPosition;
		
		private int _ProjectId;
		
		private string _ProjectName;
		
		private int _ExecutorUserId;
		
		private string _ExecutorNick;
		
		private string _ExecutorEmail;
		
		private EntityRef<Board> _Board;
		
		private EntityRef<BoardsColor> _BoardsColor;
		
		private EntityRef<Project> _Project;
		
		private EntityRef<Task> _Task;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnArchiveIdChanging(int value);
    partial void OnArchiveIdChanged();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnBoardIdChanging(int value);
    partial void OnBoardIdChanged();
    partial void OnCreatorUserIdChanging(int value);
    partial void OnCreatorUserIdChanged();
    partial void OnCreationDateTimeChanging(System.DateTimeOffset value);
    partial void OnCreationDateTimeChanged();
    partial void OnStatusChangeDateTimeChanging(System.DateTimeOffset value);
    partial void OnStatusChangeDateTimeChanged();
    partial void OnPlanningTimeChanging(System.Nullable<int> value);
    partial void OnPlanningTimeChanged();
    partial void OnColorIdChanging(int value);
    partial void OnColorIdChanged();
    partial void OnColorHEXChanging(string value);
    partial void OnColorHEXChanged();
    partial void OnColorNameChanging(string value);
    partial void OnColorNameChanged();
    partial void OnColorPositionChanging(int value);
    partial void OnColorPositionChanged();
    partial void OnProjectIdChanging(int value);
    partial void OnProjectIdChanged();
    partial void OnProjectNameChanging(string value);
    partial void OnProjectNameChanged();
    partial void OnExecutorUserIdChanging(int value);
    partial void OnExecutorUserIdChanged();
    partial void OnExecutorNickChanging(string value);
    partial void OnExecutorNickChanged();
    partial void OnExecutorEmailChanging(string value);
    partial void OnExecutorEmailChanged();
    #endregion
		
		public TasksArchive()
		{
			this._Board = default(EntityRef<Board>);
			this._BoardsColor = default(EntityRef<BoardsColor>);
			this._Project = default(EntityRef<Project>);
			this._Task = default(EntityRef<Task>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArchiveId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ArchiveId
		{
			get
			{
				return this._ArchiveId;
			}
			set
			{
				if ((this._ArchiveId != value))
				{
					this.OnArchiveIdChanging(value);
					this.SendPropertyChanging();
					this._ArchiveId = value;
					this.SendPropertyChanged("ArchiveId");
					this.OnArchiveIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL")]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					if (this._Task.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(1000) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BoardId", DbType="Int NOT NULL")]
		public int BoardId
		{
			get
			{
				return this._BoardId;
			}
			set
			{
				if ((this._BoardId != value))
				{
					if (this._Board.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBoardIdChanging(value);
					this.SendPropertyChanging();
					this._BoardId = value;
					this.SendPropertyChanged("BoardId");
					this.OnBoardIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatorUserId", DbType="Int NOT NULL")]
		public int CreatorUserId
		{
			get
			{
				return this._CreatorUserId;
			}
			set
			{
				if ((this._CreatorUserId != value))
				{
					this.OnCreatorUserIdChanging(value);
					this.SendPropertyChanging();
					this._CreatorUserId = value;
					this.SendPropertyChanged("CreatorUserId");
					this.OnCreatorUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationDateTime", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset CreationDateTime
		{
			get
			{
				return this._CreationDateTime;
			}
			set
			{
				if ((this._CreationDateTime != value))
				{
					this.OnCreationDateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreationDateTime = value;
					this.SendPropertyChanged("CreationDateTime");
					this.OnCreationDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusChangeDateTime", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset StatusChangeDateTime
		{
			get
			{
				return this._StatusChangeDateTime;
			}
			set
			{
				if ((this._StatusChangeDateTime != value))
				{
					this.OnStatusChangeDateTimeChanging(value);
					this.SendPropertyChanging();
					this._StatusChangeDateTime = value;
					this.SendPropertyChanged("StatusChangeDateTime");
					this.OnStatusChangeDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlanningTime", DbType="Int")]
		public System.Nullable<int> PlanningTime
		{
			get
			{
				return this._PlanningTime;
			}
			set
			{
				if ((this._PlanningTime != value))
				{
					this.OnPlanningTimeChanging(value);
					this.SendPropertyChanging();
					this._PlanningTime = value;
					this.SendPropertyChanged("PlanningTime");
					this.OnPlanningTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ColorId", DbType="Int NOT NULL")]
		public int ColorId
		{
			get
			{
				return this._ColorId;
			}
			set
			{
				if ((this._ColorId != value))
				{
					if (this._BoardsColor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnColorIdChanging(value);
					this.SendPropertyChanging();
					this._ColorId = value;
					this.SendPropertyChanged("ColorId");
					this.OnColorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ColorHEX", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ColorHEX
		{
			get
			{
				return this._ColorHEX;
			}
			set
			{
				if ((this._ColorHEX != value))
				{
					this.OnColorHEXChanging(value);
					this.SendPropertyChanging();
					this._ColorHEX = value;
					this.SendPropertyChanged("ColorHEX");
					this.OnColorHEXChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ColorName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ColorName
		{
			get
			{
				return this._ColorName;
			}
			set
			{
				if ((this._ColorName != value))
				{
					this.OnColorNameChanging(value);
					this.SendPropertyChanging();
					this._ColorName = value;
					this.SendPropertyChanged("ColorName");
					this.OnColorNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ColorPosition", DbType="Int NOT NULL")]
		public int ColorPosition
		{
			get
			{
				return this._ColorPosition;
			}
			set
			{
				if ((this._ColorPosition != value))
				{
					this.OnColorPositionChanging(value);
					this.SendPropertyChanging();
					this._ColorPosition = value;
					this.SendPropertyChanged("ColorPosition");
					this.OnColorPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectId", DbType="Int NOT NULL")]
		public int ProjectId
		{
			get
			{
				return this._ProjectId;
			}
			set
			{
				if ((this._ProjectId != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIdChanging(value);
					this.SendPropertyChanging();
					this._ProjectId = value;
					this.SendPropertyChanged("ProjectId");
					this.OnProjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ProjectName
		{
			get
			{
				return this._ProjectName;
			}
			set
			{
				if ((this._ProjectName != value))
				{
					this.OnProjectNameChanging(value);
					this.SendPropertyChanging();
					this._ProjectName = value;
					this.SendPropertyChanged("ProjectName");
					this.OnProjectNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExecutorUserId", DbType="Int NOT NULL")]
		public int ExecutorUserId
		{
			get
			{
				return this._ExecutorUserId;
			}
			set
			{
				if ((this._ExecutorUserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExecutorUserIdChanging(value);
					this.SendPropertyChanging();
					this._ExecutorUserId = value;
					this.SendPropertyChanged("ExecutorUserId");
					this.OnExecutorUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExecutorNick", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ExecutorNick
		{
			get
			{
				return this._ExecutorNick;
			}
			set
			{
				if ((this._ExecutorNick != value))
				{
					this.OnExecutorNickChanging(value);
					this.SendPropertyChanging();
					this._ExecutorNick = value;
					this.SendPropertyChanged("ExecutorNick");
					this.OnExecutorNickChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExecutorEmail", DbType="NVarChar(320) NOT NULL", CanBeNull=false)]
		public string ExecutorEmail
		{
			get
			{
				return this._ExecutorEmail;
			}
			set
			{
				if ((this._ExecutorEmail != value))
				{
					this.OnExecutorEmailChanging(value);
					this.SendPropertyChanging();
					this._ExecutorEmail = value;
					this.SendPropertyChanged("ExecutorEmail");
					this.OnExecutorEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Board_TasksArchive", Storage="_Board", ThisKey="BoardId", OtherKey="Id", IsForeignKey=true)]
		public Board Board
		{
			get
			{
				return this._Board.Entity;
			}
			set
			{
				Board previousValue = this._Board.Entity;
				if (((previousValue != value) 
							|| (this._Board.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Board.Entity = null;
						previousValue.TasksArchives.Remove(this);
					}
					this._Board.Entity = value;
					if ((value != null))
					{
						value.TasksArchives.Add(this);
						this._BoardId = value.Id;
					}
					else
					{
						this._BoardId = default(int);
					}
					this.SendPropertyChanged("Board");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BoardsColor_TasksArchive", Storage="_BoardsColor", ThisKey="ColorId", OtherKey="Id", IsForeignKey=true)]
		public BoardsColor BoardsColor
		{
			get
			{
				return this._BoardsColor.Entity;
			}
			set
			{
				BoardsColor previousValue = this._BoardsColor.Entity;
				if (((previousValue != value) 
							|| (this._BoardsColor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BoardsColor.Entity = null;
						previousValue.TasksArchives.Remove(this);
					}
					this._BoardsColor.Entity = value;
					if ((value != null))
					{
						value.TasksArchives.Add(this);
						this._ColorId = value.Id;
					}
					else
					{
						this._ColorId = default(int);
					}
					this.SendPropertyChanged("BoardsColor");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_TasksArchive", Storage="_Project", ThisKey="ProjectId", OtherKey="Id", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.TasksArchives.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.TasksArchives.Add(this);
						this._ProjectId = value.Id;
					}
					else
					{
						this._ProjectId = default(int);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task_TasksArchive", Storage="_Task", ThisKey="Id", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Task Task
		{
			get
			{
				return this._Task.Entity;
			}
			set
			{
				Task previousValue = this._Task.Entity;
				if (((previousValue != value) 
							|| (this._Task.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Task.Entity = null;
						previousValue.TasksArchives.Remove(this);
					}
					this._Task.Entity = value;
					if ((value != null))
					{
						value.TasksArchives.Add(this);
						this._Id = value.Id;
					}
					else
					{
						this._Id = default(int);
					}
					this.SendPropertyChanged("Task");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_TasksArchive", Storage="_User", ThisKey="ExecutorUserId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.TasksArchives.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.TasksArchives.Add(this);
						this._ExecutorUserId = value.Id;
					}
					else
					{
						this._ExecutorUserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TasksComments")]
	internal partial class TasksComment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _TaskId;
		
		private string _Comment;
		
		private int _AuthorUserId;
		
		private string _AuthorUser;
		
		private System.Nullable<int> _ParentId;
		
		private string _ParentComment;
		
		private System.DateTimeOffset _CreationDate;
		
		private bool _IsDeleted;
		
		private int _BoardId;
		
		private EntityRef<Task> _Task;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTaskIdChanging(int value);
    partial void OnTaskIdChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnAuthorUserIdChanging(int value);
    partial void OnAuthorUserIdChanged();
    partial void OnAuthorUserChanging(string value);
    partial void OnAuthorUserChanged();
    partial void OnParentIdChanging(System.Nullable<int> value);
    partial void OnParentIdChanged();
    partial void OnParentCommentChanging(string value);
    partial void OnParentCommentChanged();
    partial void OnCreationDateChanging(System.DateTimeOffset value);
    partial void OnCreationDateChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnBoardIdChanging(int value);
    partial void OnBoardIdChanged();
    #endregion
		
		public TasksComment()
		{
			this._Task = default(EntityRef<Task>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskId", DbType="Int NOT NULL")]
		public int TaskId
		{
			get
			{
				return this._TaskId;
			}
			set
			{
				if ((this._TaskId != value))
				{
					if (this._Task.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaskIdChanging(value);
					this.SendPropertyChanging();
					this._TaskId = value;
					this.SendPropertyChanged("TaskId");
					this.OnTaskIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuthorUserId", DbType="Int NOT NULL")]
		public int AuthorUserId
		{
			get
			{
				return this._AuthorUserId;
			}
			set
			{
				if ((this._AuthorUserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAuthorUserIdChanging(value);
					this.SendPropertyChanging();
					this._AuthorUserId = value;
					this.SendPropertyChanged("AuthorUserId");
					this.OnAuthorUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuthorUser", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string AuthorUser
		{
			get
			{
				return this._AuthorUser;
			}
			set
			{
				if ((this._AuthorUser != value))
				{
					this.OnAuthorUserChanging(value);
					this.SendPropertyChanging();
					this._AuthorUser = value;
					this.SendPropertyChanged("AuthorUser");
					this.OnAuthorUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentId", DbType="Int")]
		public System.Nullable<int> ParentId
		{
			get
			{
				return this._ParentId;
			}
			set
			{
				if ((this._ParentId != value))
				{
					this.OnParentIdChanging(value);
					this.SendPropertyChanging();
					this._ParentId = value;
					this.SendPropertyChanged("ParentId");
					this.OnParentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentComment", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ParentComment
		{
			get
			{
				return this._ParentComment;
			}
			set
			{
				if ((this._ParentComment != value))
				{
					this.OnParentCommentChanging(value);
					this.SendPropertyChanging();
					this._ParentComment = value;
					this.SendPropertyChanged("ParentComment");
					this.OnParentCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationDate", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset CreationDate
		{
			get
			{
				return this._CreationDate;
			}
			set
			{
				if ((this._CreationDate != value))
				{
					this.OnCreationDateChanging(value);
					this.SendPropertyChanging();
					this._CreationDate = value;
					this.SendPropertyChanged("CreationDate");
					this.OnCreationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BoardId", DbType="Int NOT NULL")]
		public int BoardId
		{
			get
			{
				return this._BoardId;
			}
			set
			{
				if ((this._BoardId != value))
				{
					this.OnBoardIdChanging(value);
					this.SendPropertyChanging();
					this._BoardId = value;
					this.SendPropertyChanged("BoardId");
					this.OnBoardIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task_TasksComment", Storage="_Task", ThisKey="TaskId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Task Task
		{
			get
			{
				return this._Task.Entity;
			}
			set
			{
				Task previousValue = this._Task.Entity;
				if (((previousValue != value) 
							|| (this._Task.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Task.Entity = null;
						previousValue.TasksComments.Remove(this);
					}
					this._Task.Entity = value;
					if ((value != null))
					{
						value.TasksComments.Add(this);
						this._TaskId = value.Id;
					}
					else
					{
						this._TaskId = default(int);
					}
					this.SendPropertyChanged("Task");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_TasksComment", Storage="_User", ThisKey="AuthorUserId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.TasksComments.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.TasksComments.Add(this);
						this._AuthorUserId = value.Id;
					}
					else
					{
						this._AuthorUserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TasksStatuses")]
	internal partial class TasksStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private int _BoardId;
		
		private int _Position;
		
		private bool _NeedTimeCounting;
		
		private System.Nullable<int> _MaxTaskCountPerUser;
		
		private bool _IsBacklog;
		
		private bool _PlanningRequired;
		
		private System.Nullable<int> _MaxPlanningTime;
		
		private EntitySet<Task> _Tasks;
		
		private EntityRef<Board> _Board;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnBoardIdChanging(int value);
    partial void OnBoardIdChanged();
    partial void OnPositionChanging(int value);
    partial void OnPositionChanged();
    partial void OnNeedTimeCountingChanging(bool value);
    partial void OnNeedTimeCountingChanged();
    partial void OnMaxTaskCountPerUserChanging(System.Nullable<int> value);
    partial void OnMaxTaskCountPerUserChanged();
    partial void OnIsBacklogChanging(bool value);
    partial void OnIsBacklogChanged();
    partial void OnPlanningRequiredChanging(bool value);
    partial void OnPlanningRequiredChanged();
    partial void OnMaxPlanningTimeChanging(System.Nullable<int> value);
    partial void OnMaxPlanningTimeChanged();
    #endregion
		
		public TasksStatus()
		{
			this._Tasks = new EntitySet<Task>(new Action<Task>(this.attach_Tasks), new Action<Task>(this.detach_Tasks));
			this._Board = default(EntityRef<Board>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BoardId", DbType="Int NOT NULL")]
		public int BoardId
		{
			get
			{
				return this._BoardId;
			}
			set
			{
				if ((this._BoardId != value))
				{
					if (this._Board.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBoardIdChanging(value);
					this.SendPropertyChanging();
					this._BoardId = value;
					this.SendPropertyChanged("BoardId");
					this.OnBoardIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="Int NOT NULL")]
		public int Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NeedTimeCounting", DbType="Bit NOT NULL")]
		public bool NeedTimeCounting
		{
			get
			{
				return this._NeedTimeCounting;
			}
			set
			{
				if ((this._NeedTimeCounting != value))
				{
					this.OnNeedTimeCountingChanging(value);
					this.SendPropertyChanging();
					this._NeedTimeCounting = value;
					this.SendPropertyChanged("NeedTimeCounting");
					this.OnNeedTimeCountingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxTaskCountPerUser", DbType="Int")]
		public System.Nullable<int> MaxTaskCountPerUser
		{
			get
			{
				return this._MaxTaskCountPerUser;
			}
			set
			{
				if ((this._MaxTaskCountPerUser != value))
				{
					this.OnMaxTaskCountPerUserChanging(value);
					this.SendPropertyChanging();
					this._MaxTaskCountPerUser = value;
					this.SendPropertyChanged("MaxTaskCountPerUser");
					this.OnMaxTaskCountPerUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsBacklog", DbType="Bit NOT NULL")]
		public bool IsBacklog
		{
			get
			{
				return this._IsBacklog;
			}
			set
			{
				if ((this._IsBacklog != value))
				{
					this.OnIsBacklogChanging(value);
					this.SendPropertyChanging();
					this._IsBacklog = value;
					this.SendPropertyChanged("IsBacklog");
					this.OnIsBacklogChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlanningRequired", DbType="Bit NOT NULL")]
		public bool PlanningRequired
		{
			get
			{
				return this._PlanningRequired;
			}
			set
			{
				if ((this._PlanningRequired != value))
				{
					this.OnPlanningRequiredChanging(value);
					this.SendPropertyChanging();
					this._PlanningRequired = value;
					this.SendPropertyChanged("PlanningRequired");
					this.OnPlanningRequiredChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxPlanningTime", DbType="Int")]
		public System.Nullable<int> MaxPlanningTime
		{
			get
			{
				return this._MaxPlanningTime;
			}
			set
			{
				if ((this._MaxPlanningTime != value))
				{
					this.OnMaxPlanningTimeChanging(value);
					this.SendPropertyChanging();
					this._MaxPlanningTime = value;
					this.SendPropertyChanged("MaxPlanningTime");
					this.OnMaxPlanningTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TasksStatus_Task", Storage="_Tasks", ThisKey="Id", OtherKey="TaskStatusId")]
		public EntitySet<Task> Tasks
		{
			get
			{
				return this._Tasks;
			}
			set
			{
				this._Tasks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Board_TasksStatus", Storage="_Board", ThisKey="BoardId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Board Board
		{
			get
			{
				return this._Board.Entity;
			}
			set
			{
				Board previousValue = this._Board.Entity;
				if (((previousValue != value) 
							|| (this._Board.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Board.Entity = null;
						previousValue.TasksStatus.Remove(this);
					}
					this._Board.Entity = value;
					if ((value != null))
					{
						value.TasksStatus.Add(this);
						this._BoardId = value.Id;
					}
					else
					{
						this._BoardId = default(int);
					}
					this.SendPropertyChanged("Board");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.TasksStatus = this;
		}
		
		private void detach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.TasksStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	internal partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Nick;
		
		private string _EMail;
		
		private string _Password;
		
		private bool _IsConfirmed;
		
		private System.DateTimeOffset _RegistrationDate;
		
		private int _TimeZone;
		
		private bool _IsAdmin;
		
		private string _ConfimKey;
		
		private int _RegistrationType;
		
		private bool _RecievOwnEvents;
		
		private string _Login;
		
		private System.Nullable<System.DateTimeOffset> _EmailConfirmDate;
		
		private EntitySet<UsersInvite> _UsersInvites;
		
		private EntitySet<BoardsUser> _BoardsUsers;
		
		private EntitySet<OrganizationUser> _OrganizationUsers;
		
		private EntitySet<ProjectsUser> _ProjectsUsers;
		
		private EntitySet<Task> _Tasks;
		
		private EntitySet<Task> _Tasks1;
		
		private EntitySet<TasksArchive> _TasksArchives;
		
		private EntitySet<TasksComment> _TasksComments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNickChanging(string value);
    partial void OnNickChanged();
    partial void OnEMailChanging(string value);
    partial void OnEMailChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnIsConfirmedChanging(bool value);
    partial void OnIsConfirmedChanged();
    partial void OnRegistrationDateChanging(System.DateTimeOffset value);
    partial void OnRegistrationDateChanged();
    partial void OnTimeZoneChanging(int value);
    partial void OnTimeZoneChanged();
    partial void OnIsAdminChanging(bool value);
    partial void OnIsAdminChanged();
    partial void OnConfimKeyChanging(string value);
    partial void OnConfimKeyChanged();
    partial void OnRegistrationTypeChanging(int value);
    partial void OnRegistrationTypeChanged();
    partial void OnRecievOwnEventsChanging(bool value);
    partial void OnRecievOwnEventsChanged();
    partial void OnLoginChanging(string value);
    partial void OnLoginChanged();
    partial void OnEmailChangeDateChanging(System.Nullable<System.DateTimeOffset> value);
    partial void OnEmailChangeDateChanged();
    #endregion
		
		public User()
		{
			this._UsersInvites = new EntitySet<UsersInvite>(new Action<UsersInvite>(this.attach_UsersInvites), new Action<UsersInvite>(this.detach_UsersInvites));
			this._BoardsUsers = new EntitySet<BoardsUser>(new Action<BoardsUser>(this.attach_BoardsUsers), new Action<BoardsUser>(this.detach_BoardsUsers));
			this._OrganizationUsers = new EntitySet<OrganizationUser>(new Action<OrganizationUser>(this.attach_OrganizationUsers), new Action<OrganizationUser>(this.detach_OrganizationUsers));
			this._ProjectsUsers = new EntitySet<ProjectsUser>(new Action<ProjectsUser>(this.attach_ProjectsUsers), new Action<ProjectsUser>(this.detach_ProjectsUsers));
			this._Tasks = new EntitySet<Task>(new Action<Task>(this.attach_Tasks), new Action<Task>(this.detach_Tasks));
			this._Tasks1 = new EntitySet<Task>(new Action<Task>(this.attach_Tasks1), new Action<Task>(this.detach_Tasks1));
			this._TasksArchives = new EntitySet<TasksArchive>(new Action<TasksArchive>(this.attach_TasksArchives), new Action<TasksArchive>(this.detach_TasksArchives));
			this._TasksComments = new EntitySet<TasksComment>(new Action<TasksComment>(this.attach_TasksComments), new Action<TasksComment>(this.detach_TasksComments));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nick", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Nick
		{
			get
			{
				return this._Nick;
			}
			set
			{
				if ((this._Nick != value))
				{
					this.OnNickChanging(value);
					this.SendPropertyChanging();
					this._Nick = value;
					this.SendPropertyChanged("Nick");
					this.OnNickChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EMail", DbType="NVarChar(320) NOT NULL", CanBeNull=false)]
		public string EMail
		{
			get
			{
				return this._EMail;
			}
			set
			{
				if ((this._EMail != value))
				{
					this.OnEMailChanging(value);
					this.SendPropertyChanging();
					this._EMail = value;
					this.SendPropertyChanged("EMail");
					this.OnEMailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsConfirmed", DbType="Bit NOT NULL")]
		public bool IsConfirmed
		{
			get
			{
				return this._IsConfirmed;
			}
			set
			{
				if ((this._IsConfirmed != value))
				{
					this.OnIsConfirmedChanging(value);
					this.SendPropertyChanging();
					this._IsConfirmed = value;
					this.SendPropertyChanged("IsConfirmed");
					this.OnIsConfirmedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegistrationDate", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset RegistrationDate
		{
			get
			{
				return this._RegistrationDate;
			}
			set
			{
				if ((this._RegistrationDate != value))
				{
					this.OnRegistrationDateChanging(value);
					this.SendPropertyChanging();
					this._RegistrationDate = value;
					this.SendPropertyChanged("RegistrationDate");
					this.OnRegistrationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeZone", DbType="Int NOT NULL")]
		public int TimeZone
		{
			get
			{
				return this._TimeZone;
			}
			set
			{
				if ((this._TimeZone != value))
				{
					this.OnTimeZoneChanging(value);
					this.SendPropertyChanging();
					this._TimeZone = value;
					this.SendPropertyChanged("TimeZone");
					this.OnTimeZoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAdmin", DbType="Bit NOT NULL")]
		public bool IsAdmin
		{
			get
			{
				return this._IsAdmin;
			}
			set
			{
				if ((this._IsAdmin != value))
				{
					this.OnIsAdminChanging(value);
					this.SendPropertyChanging();
					this._IsAdmin = value;
					this.SendPropertyChanged("IsAdmin");
					this.OnIsAdminChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConfimKey", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ConfimKey
		{
			get
			{
				return this._ConfimKey;
			}
			set
			{
				if ((this._ConfimKey != value))
				{
					this.OnConfimKeyChanging(value);
					this.SendPropertyChanging();
					this._ConfimKey = value;
					this.SendPropertyChanged("ConfimKey");
					this.OnConfimKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegistrationType", DbType="Int NOT NULL")]
		public int RegistrationType
		{
			get
			{
				return this._RegistrationType;
			}
			set
			{
				if ((this._RegistrationType != value))
				{
					this.OnRegistrationTypeChanging(value);
					this.SendPropertyChanging();
					this._RegistrationType = value;
					this.SendPropertyChanged("RegistrationType");
					this.OnRegistrationTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecievOwnEvents", DbType="Bit NOT NULL")]
		public bool RecievOwnEvents
		{
			get
			{
				return this._RecievOwnEvents;
			}
			set
			{
				if ((this._RecievOwnEvents != value))
				{
					this.OnRecievOwnEventsChanging(value);
					this.SendPropertyChanging();
					this._RecievOwnEvents = value;
					this.SendPropertyChanged("RecievOwnEvents");
					this.OnRecievOwnEventsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Login", DbType="NVarChar(320) NOT NULL", CanBeNull=false)]
		public string Login
		{
			get
			{
				return this._Login;
			}
			set
			{
				if ((this._Login != value))
				{
					this.OnLoginChanging(value);
					this.SendPropertyChanging();
					this._Login = value;
					this.SendPropertyChanged("Login");
					this.OnLoginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailConfirmDate", DbType="DateTimeOffset")]
		public System.Nullable<System.DateTimeOffset> EmailChangeDate
		{
			get
			{
				return this._EmailConfirmDate;
			}
			set
			{
				if ((this._EmailConfirmDate != value))
				{
					this.OnEmailChangeDateChanging(value);
					this.SendPropertyChanging();
					this._EmailConfirmDate = value;
					this.SendPropertyChanged("EmailChangeDate");
					this.OnEmailChangeDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UsersInvite", Storage="_UsersInvites", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<UsersInvite> UsersInvites
		{
			get
			{
				return this._UsersInvites;
			}
			set
			{
				this._UsersInvites.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_BoardsUser", Storage="_BoardsUsers", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<BoardsUser> BoardsUsers
		{
			get
			{
				return this._BoardsUsers;
			}
			set
			{
				this._BoardsUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_OrganizationUser", Storage="_OrganizationUsers", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<OrganizationUser> OrganizationUsers
		{
			get
			{
				return this._OrganizationUsers;
			}
			set
			{
				this._OrganizationUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ProjectsUser", Storage="_ProjectsUsers", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<ProjectsUser> ProjectsUsers
		{
			get
			{
				return this._ProjectsUsers;
			}
			set
			{
				this._ProjectsUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Task", Storage="_Tasks", ThisKey="Id", OtherKey="ExecutorUserId")]
		public EntitySet<Task> Tasks
		{
			get
			{
				return this._Tasks;
			}
			set
			{
				this._Tasks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Task1", Storage="_Tasks1", ThisKey="Id", OtherKey="CreatorUserId")]
		public EntitySet<Task> Tasks1
		{
			get
			{
				return this._Tasks1;
			}
			set
			{
				this._Tasks1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_TasksArchive", Storage="_TasksArchives", ThisKey="Id", OtherKey="ExecutorUserId")]
		public EntitySet<TasksArchive> TasksArchives
		{
			get
			{
				return this._TasksArchives;
			}
			set
			{
				this._TasksArchives.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_TasksComment", Storage="_TasksComments", ThisKey="Id", OtherKey="AuthorUserId")]
		public EntitySet<TasksComment> TasksComments
		{
			get
			{
				return this._TasksComments;
			}
			set
			{
				this._TasksComments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UsersInvites(UsersInvite entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UsersInvites(UsersInvite entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_BoardsUsers(BoardsUser entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_BoardsUsers(BoardsUser entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_OrganizationUsers(OrganizationUser entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_OrganizationUsers(OrganizationUser entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_ProjectsUsers(ProjectsUser entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_ProjectsUsers(ProjectsUser entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Tasks1(Task entity)
		{
			this.SendPropertyChanging();
			entity.User1 = this;
		}
		
		private void detach_Tasks1(Task entity)
		{
			this.SendPropertyChanging();
			entity.User1 = null;
		}
		
		private void attach_TasksArchives(TasksArchive entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_TasksArchives(TasksArchive entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_TasksComments(TasksComment entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_TasksComments(TasksComment entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Texts")]
	internal partial class Text : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Title;
		
		private string _Content;
		
		private int _TypeId;
		
		private System.DateTimeOffset _CreationDateTime;
		
		private bool _IsVisible;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    partial void OnTypeIdChanging(int value);
    partial void OnTypeIdChanged();
    partial void OnCreationDateTimeChanging(System.DateTimeOffset value);
    partial void OnCreationDateTimeChanged();
    partial void OnIsVisibleChanging(bool value);
    partial void OnIsVisibleChanged();
    #endregion
		
		public Text()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Content", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeId", DbType="Int NOT NULL")]
		public int TypeId
		{
			get
			{
				return this._TypeId;
			}
			set
			{
				if ((this._TypeId != value))
				{
					this.OnTypeIdChanging(value);
					this.SendPropertyChanging();
					this._TypeId = value;
					this.SendPropertyChanged("TypeId");
					this.OnTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationDateTime", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset CreationDateTime
		{
			get
			{
				return this._CreationDateTime;
			}
			set
			{
				if ((this._CreationDateTime != value))
				{
					this.OnCreationDateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreationDateTime = value;
					this.SendPropertyChanged("CreationDateTime");
					this.OnCreationDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsVisible", DbType="Bit NOT NULL")]
		public bool IsVisible
		{
			get
			{
				return this._IsVisible;
			}
			set
			{
				if ((this._IsVisible != value))
				{
					this.OnIsVisibleChanging(value);
					this.SendPropertyChanging();
					this._IsVisible = value;
					this.SendPropertyChanged("IsVisible");
					this.OnIsVisibleChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
